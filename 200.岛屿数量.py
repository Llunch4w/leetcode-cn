#
# @lc app=leetcode.cn id=200 lang=python
#
# [200] 岛屿数量
#

# @lc code=start
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        count = 0
        visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]
        for i, row in enumerate(grid):
            for j, col in enumerate(row):
                if grid[i][j] == "1" and not visited[i][j]:
                    self.bfs(grid, visited, i, j)
                    count += 1
        return count
                    
                    
    def bfs(self, grid, visited, i, j):
        nrows, ncols = len(grid), len(grid[0])
        directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]
        queue = [[i, j]]
        visited[i][j] = True
        while len(queue) > 0:
            new_queue = []
            for loc in queue:
                row_id, col_id = loc
                for direction in directions:
                    new_row_id = row_id + direction[0]
                    new_col_id = col_id + direction[1]
                    if not self.valid_position(new_row_id, new_col_id, nrows, ncols):
                        continue
                    if visited[new_row_id][new_col_id] or grid[new_row_id][new_col_id] == '0':
                        continue
                    visited[new_row_id][new_col_id] = True
                    new_queue.append([new_row_id, new_col_id])
            queue = new_queue
        
                    
    def valid_position(self, row_id, col_id, nrows, ncols):
        if row_id < 0 or row_id >= nrows:
            return False
        if col_id < 0 or col_id >= ncols:
            return False
        return True
if __name__ == "__main__":
    solution = Solution()
    grid = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
    print(solution.numIslands(grid))
        
# @lc code=end

